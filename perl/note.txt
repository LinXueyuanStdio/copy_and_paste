#数据类型

#标量
#标量是Perl语言中最简单的一种数据类型。
#这种数据类型的变量可以是数字，字符串，浮点数，不作严格的区分。
#在使用时在变量的名字前面加上一个"$",表示是标量。例如：
$myfirst=123;　    #数字123　
$mysecond="123";   #字符串123　

#数组
#数组变量以字符"@"开头，索引从0开始，如：@arr=(1,2,3)
@array = (1,2,3);
$array[50] = 4; # 按索引赋值
#数组长度返回的是数组物理大小，而不是元素的个数
$size = @array;  # 数组大小:  51
$max_index = $#array; #最大索引: 50

@names = ("google", "runoob", "taobao");
print "\$names[0] = $names[0]\n";
@array = (1, 2, 'Hello');
@array = qw/这是 一个 数组/;
print "$array[-1]\n";    # 负数，反向读取
@var_10 = (1..10);  
  print "@var_10\n";   # 输出 1 到 10
@var_abc = (a..z);
  print "@var_abc\n";  # 输出 a 到 z

push(@sites, "baidu"); # 在数组结尾添加一个元素
unshift(@sites, "weibo"); #  在数组开头添加一个元素
pop(@sites); # 删除数组末尾的元素
shift(@sites); # 移除数组开头的元素

@sites = qw/google taobao runoob weibo qq facebook 网易/;
@sites2 = @sites[3,4,5]; # [weibo, qq, facebook]
@sites2 = @sites[3..5]; # 也可以 

@nums = (1..20);
splice(@nums, 5, 6, 21..25); # 从索引5开始，替换6个元素，用21..26替换
# 替换后 - 1 2 3 4 5 21 22 23 24 25 26 12 13 14 15 16 17 18 19 20

$var_string = "www-runoob-com";
@string = split('-', $var_string); #　string是数组[www, runoob, com]
$string2 = join( ',', @names );    #  string=="www,runoob,com"

@sites = qw(google taobao runoob facebook);
@sites = sort(@sites); # facebook google runoob taobao
#根据 ASCII 数字值来排序

#特殊变量 $[ 表示数组的第一索引值，一般都为 0 ，
#如果我们将 $[ 设置为 1，
#则数组的第一个索引值即为 1，第二个为 2，以此类推
$[ = 1;
@sites = qw(google taobao runoob facebook);
print "$sites[1]" # google

#在数组中嵌入多个数组，并合并到主数组
@odd = (1,3,5);
@even = (2, 4, 6);
@numbers = (@odd, @even); #numbers = 1 3 4 5 6
@numbers = (1,3,(4,5,6)); #numbers = 1 3 5 2 4 6


@list = (5,4,3,2,1)[1..3]; #list 的值 = 4 3 2







#哈希
#哈希是一个无序的 key/value 对集合。
#可以使用键作为下标获取值。
#哈希变量以字符"%"开头。
%h=('a'=>1,'b'=>2); 
print "\$data{'google'} = $data{'google'}\n";
# 1
$data{'google'} = 'google.com';
$data{'runoob'} = 'runoob.com';
$data{'taobao'} = 'taobao.com';
# 2
%data = ('google', 'google.com', 'runoob', 'runoob.com', 'taobao', 'taobao.com');
# 3
%data = ('google'=>'google.com', 'runoob'=>'runoob.com', 'taobao'=>'taobao.com');
# 4 这种方式 key 不能出现空格，读取元素方式为$val = %data{-google}
%data = (-google=>'google.com', -runoob=>'runoob.com', -taobao=>'taobao.com');


%data = (-taobao => 45, -google => 30, -runoob => 40);
@array = @data{-taobao, -runoob}; # array : 45 40
@names = keys %data; # names : taobao google runoob
$size = @keys; #哈希大小: 3
@urls = values %data;# urls  : 45     30     40
$size = @values; #哈希大小: 3
if( exists($data{'facebook'} ) ){
   print "facebook 的网址为 $data{'facebook'} \n";
}
#添加 key/value 对可以通过简单的赋值来完成。
#删除哈希元素你需要使用 delete 函数
$data{'facebook'} = 'facebook.com';# 添加元素
delete $data{'taobao'};# 删除哈希中的元素








#!/usr/bin/perl

# 换行 \n 位于双引号内，有效
$str = "菜鸟教程  \nwww.runoob.com";
print "$str\n";

# 换行 \n 位于单引号内，无效
$str = '菜鸟教程  \nwww.runoob.com';
print "$str\n";

# 只有 R 会转换为大写
$str = "\urunoob";
print "$str\n";

# 所有的字母都会转换为大写
$str = "\Urunoob";
print "$str\n";

# 指定部分会转换为大写
$str = "Welcome to \Urunoob\E.com!"; 
print "$str\n";

# 将到\E为止的非单词（non-word）字符加上反斜线
$str = "\QWelcome to runoob's family";
print "$str\n";

@copy = @names;   # 复制数组
$size = @names;   # 数组赋值给标量，返回数组元素个数

$str = "hello" . "world";       # 字符串连接
$num = 5 + 10;                  # 两数相加
$mix = $str . $num;             # 连接字符串和数字

print "文件名 ". __FILE__ . "\n";
print "行号 " . __LINE__ ."\n";
print "包名 " . __PACKAGE__ ."\n";#当前执行脚本的文件名，行号，包名。

$smile  = v9786;  #
$foo    = v102.111.111;  #foo = foo
$martin = v77.97.114.116.105.110;  #martin = Martin





#条件语句

if( $a  ==  20 ){
    printf "a 的值为 20\n";
}elsif( $a ==  30 ){
    printf "a 的值为 30\n";
}else{
    printf "a 的值为 $a\n";
}
unless( $a == 30 ){
    printf "a 的值不为 30\n"; # 布尔表达式为 false 时执行
}elsif( $a == 30 ){
    printf "a 的值为 30\n";# 布尔表达式为 true 时执行
}else{
    printf "a 的值为 $a\n";# 没有条件匹配时执行
}
use Switch; # switch case 执行是基于 Switch 模块， 
#Switch 模块使用Filter::Util::Call 和 Text::Balanced 来执行，这两个模块都需要安装。
switch(argument){
   case 10           { print "数字 10\n"; next; }  # 匹配后继续执行
   case "a"          { print "字符串 a" }
   case [1..10,42]   { print "数字在列表中" }
   case (\@array)    { print "数字在数组中" }
   case /\w+/        { print "正则匹配模式" }
   case qr/\w+/      { print "正则匹配模式" }
   case (\%hash)     { print "哈希" }
   case (\&sub)      { print "子进程" }
   else              { print "不匹配之前的条件" }
}
# 三元运算符 ? :



# 执行 while 循环
while( $a < 20 ){
   if( $a == 15){     # 跳出迭代
     $a = $a + 1;
     next;
   }
   if( $a == 18) {      # 退出循环
     $a = $a + 1;
     last;
   }
   printf "a 的值为 : $a\n";
   $a = $a + 1;
}continue{ #在条件语句再次判断前执行
   $a = $a + 1;
}

# 执行 until 循环
until( $a > 10 ){
   printf "a 的值为 : $a\n";
   $a = $a + 1;
}
# 执行 for 循环
for( $a = 0; $a < 10; $a = $a + 1 ){
    print "a 的值为: $a\n";
}
for( ; ; ){
   printf "循环会无限执行。\n"; #  Ctrl + C 来终止循环。
}
# 执行foreach 循环
@list = (2, 12, 36, 42, 51);
foreach $a (@list){
    print "a 的值为: $a\n";
}continue{ # 在条件语句再次判断前执行
   last if $a == 4;
}
# 执行 do...while 循环
do{
   printf "a 的值为: $a\n";
   $a = $a + 1;
}while( $a < 15 );



#带标号修饰符LABEL的redo语句  #相当于goto
#表示把循环控制流程直接转到与标号修饰符LABEL相关联的语句块的第一行处开始执行，
#而不再执行redo语句之后的语句和continue语句块；
abc : 
if( $a == 5 ){
  $a = $a + 1;
  redo abc;
}
#不带标号修饰符LABEL的redo语句  # 相当于next
#表示把循环控制流程直接转到当前语句块的第一行处开始执行，
#而不再执行redo语句之后的语句和continue语句块；
if( $a == 5 ){
  $a = $a + 1;
  redo;
}


$str1 = "LO";
$str2 = "OP";
LOOP:
if( $a == 15){
  $a = $a + 1;
  # 使用 goto EXPR 形式
  goto $str1.$str2;    # 类似 goto LOOP
}


$a = abc ，$b = xyz
abc lt $b # true    less than
$a gt $b  # false   greater than
$a le $b  # true    less or equal
$a ge $b  # false   greater or equal
$a ne $b  # true    not equal
$a cmp $b # -1      compare

#q{ }	为字符串添加单引号
	q{abcd} === 'abcd'
#qq{ }	为字符串添加双引号
	qq{abcd} === "abcd"
#qx{ }	为字符串添加反引号
	qx{abcd} === `abcd`
#.	点号 (.) 用于连接两个字符串。	
 $a="run", $b="oob" 
 $a.$b === "runoob"
#x	x 运算符返回字符串重复的次数。	
('-' x 3) 输出为 ---。
#..	.. 为范围运算符。
	(2..5) 输出结果为 (2, 3, 4, 5)
#->	箭号用于指定一个类的方法	
$obj->$a 表示对象 $obj 的 $a 方法。



#时间
=pdo
sec     # 秒， 0 到 61
min     # 分钟， 0 到 59
hour    # 小时， 0 到 24
mday    # 天， 1 到 31
mon     # 月， 0 到 11
year    # 年，从 1900 开始
wday    # 星期几，0-6,0表示周日
yday    # 一年中的第几天,0-364,365
isdst   # 如果夏令时有效，则为真
=cut
@months = qw( 一月 二月 三月 四月 五月 六月 七月 八月 九月 十月 十一月 十二月 );
@days = qw(星期天 星期一 星期二 星期三 星期四 星期五 星期六);

($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
print "$mday $months[$mon] $days[$wday]\n";
printf("%02d:%02d:%02d", $hour, $min, $sec); # 格式化时间：HH:MM:SS
$epoc = time(); # 从1970年1月1日起累计的秒数

use POSIX qw(strftime); #strftime() 可以将时间格式化为我们想要的格式

$datestring = strftime "%Y-%m-%d %H:%M:%S", localtime;
printf("时间日期 - $datestring\n"); # 2016-06-12 12:15:13
#  GMT 格式化时间日期
$datestring = strftime "%Y-%m-%d %H:%M:%S", gmtime;
printf("时间日期 - $datestring\n"); # 2016-06-12 04:15:13



# 定义求平均值函数
sub Average{
  # 获取所有传入的参数
  $n = scalar(@_);# 用户可以通过改变 @_ 数组中的值来改变相应实际参数的值
  $sum = 0;
  foreach $item (@_){
    $sum += $item;
  }
  $average = $sum / $n;
  print '传入的参数为 : ',"@_\n";           # 打印整个数组10 20 30
  print "第一个参数值为 : $_[0]\n";         # 打印第一个参数10
  print "传入参数的平均值为 : $average\n";  # 打印平均值20
}
Average(10, 20, 30); # 调用函数

# 列表参数
sub PrintList{
#my 操作符用于创建词法作用域变量，
#通过 my 创建的变量，存活于声明开始的地方，直到闭合作用域的结尾
   my @list = @_;
   print "列表为 : @list\n";# 10 1 2 3 4 #标量和数组合并了
}
$a = 10;
@b = (1, 2, 3, 4);
PrintList($a, @b); # 列表参数

# 哈希参数
sub PrintHash{
  my (%hash) = @_; # 复制到 @_ 中，哈希表将被展开为键/值组合的列表
  foreach my $key ( keys %hash ){
    my $value = $hash{$key};
    print "$key : $value\n";
  }
}
%hash = ('name' => 'runoob', 'age' => 3);
PrintHash(%hash);  # 传递哈希参数

#没有使用 return 语句，则子程序的最后一行语句将作为返回值


# 全局变量
$string = "Hello, World!";

sub PrintRunoob{
   # PrintHello 函数私有变量
   local $string; #使用 local 为全局变量提供临时的值，在退出作用域后将原来的值还回去
   $string = "Hello, Runoob!";
   # 子程序调用的子程序
   PrintMe();
   print "PrintRunoob 函数内字符串值：$string\n";
}
sub PrintMe{
   print "PrintMe 函数内字符串值：$string\n";
}
sub PrintHello{
   print "PrintHello 函数外字符串值：$string\n";
}

# 函数调用
PrintRunoob();# PrintMe 函数内字符串值：Hello, Runoob!
              # PrintRunoob 函数内字符串值：Hello, Runoob!
PrintHello(); # PrintHello 函数内字符串值：Hello, World!
print "函数外部字符串值：$string\n";#函数外部字符串值：Hello, World!


use feature 'state';
#state可以声明标量、数组、哈希。但在声明数组和哈希时，不能对其初始化
sub PrintCount{
  state $count = 0; # 初始化变量 类似于C里面的static
  print "counter 值为：$count\n";
  $count++;
}


#引用
$scalarref = \$foo;     # 标量变量引用
$arrayref  = \@ARGV;    # 列表的引用
$hashref   = \%ENV;     # 哈希的引用
$coderef   = \&handler; # 子过程引用
$globref   = \*foo;     # GLOB句柄引用
$aref= [ 1,"foo",undef,13 ];# 匿名数组引用
my $aref = [   
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9],
]#匿名数组的元素仍然可以是匿名数组，
#所以我们可以用这种方法构造数组的数组，可以构造任意维度的数组
$href= { APR =>4, AUG =>8 }; # 匿名哈希引用
$coderef = sub { print "Runoob!\n" };#匿名子程序
print "r 的引用类型 : ", ref($r), "\n"; # SCALAR HASH ARRAY

# 创建函数的引用
$cref = \&PrintHash;
# 使用引用调用函数
&$cref(%hash);










